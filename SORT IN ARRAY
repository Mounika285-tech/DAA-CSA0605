def sortArrayByParityII(nums):
    even = [num for num in nums if num % 2 == 0]
    odd = [num for num in nums if num % 2 != 0]
    return [even[i // 2] if i % 2 == 0 else odd[i // 2] for i in range(len(nums))]

# Example usage:
nums = [4, 2, 5, 7]
print(sortArrayByParityII(nums))  # Output: [4, 5, 2, 7]


This solution first separates the even and odd numbers into two lists. Then, it uses a list comprehension to create a new list where even numbers are placed at even indices and odd numbers are placed at odd indices.

Alternatively, you can use a two-pointer technique to achieve the same result:


def sortArrayByParityII(nums):
    even, odd = 0, 1
    while even < len(nums) and odd < len(nums):
        if nums[even] % 2 == 0:
            even += 2
        elif nums[odd] % 2 != 0:
            odd += 2
        else:
            nums[even], nums[odd] = nums[odd], nums[even]
            even += 2
            odd += 2
    return nums

