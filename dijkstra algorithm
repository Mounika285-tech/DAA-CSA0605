import heapq

def dijkstra(edges, source, target):
    graph = {}
    for u, v, w in edges:
        if u not in graph:
            graph[u] = []
        graph[u].append((v, w))

    min_heap = [(0, source)]  # (distance, vertex)
    distances = {source: 0}
    visited = set()

    while min_heap:
        current_distance, current_vertex = heapq.heappop(min_heap)

        if current_vertex in visited:
            continue
        visited.add(current_vertex)

        if current_vertex == target:
            return current_distance

        for neighbor, weight in graph.get(current_vertex, []):
            distance = current_distance + weight
            if neighbor not in visited and (neighbor not in distances or distance < distances[neighbor]):
                distances[neighbor] = distance
                heapq.heappush(min_heap, (distance, neighbor))

    return float('inf')  # Target not reachable

# Example usage
edges = [(0, 1, 4), (0, 2, 1), (2, 1, 2), (1, 3, 1), (2, 3, 5)]
source = 0
target = 3
print(dijkstra(edges, source, target))  # Output: 5
