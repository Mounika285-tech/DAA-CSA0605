import numpy as np

def strassen(A, B):
    n = A.shape[0]

    # Base case: 1x1 matrix
    if n == 1:
        return A * B

    # Split matrices into quarters
    A11, A12, A21, A22 = split_matrix(A)
    B11, B12, B21, B22 = split_matrix(B)

    # Recursive calls
    M1 = strassen(A11 + A22, B11 + B22)
    M2 = strassen(A21 + A22, B11)
    M3 = strassen(A11, B12 - B22)
    M4 = strassen(A22, B21 - B11)
    M5 = strassen(A11 + A12, B22)
    M6 = strassen(A21 - A11, B11 + B12)
    M7 = strassen(A12 - A22, B21 + B22)

    # Combine results
    C11 = M1 + M4 - M5 + M7
    C12 = M3 + M5
    C21 = M2 + M4
    C22 = M1 - M2 + M3 + M6

    # Combine quarters into a single matrix
    C = np.vstack((np.hstack((C11, C12)), np.hstack((C21, C22))))

    return C

def split_matrix(M):
    n = M.shape[0]
    m = n // 2
    return M[:m, :m], M[:m, m:], M[m:, :m], M[m:, m:]

# Test the code
A = np.random.randint(0, 10, size=(4, 4))
B = np.random.randint(0, 10, size=(4, 4))
C = strassen(A, B)
print("Matrix A:")
print(A)
print("Matrix B:")
print(B)
print("Matrix C (A * B):")
print(C)
