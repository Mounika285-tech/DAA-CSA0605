def is_safe(graph, colors, vertex, c):
    for neighbor in graph[vertex]:
        if colors[neighbor] == c:
            return False
    return True

def graph_coloring_util(graph, m, colors, vertex):
    if vertex == len(graph):
        return True

    for c in range(1, m + 1):
        if is_safe(graph, colors, vertex, c):
            colors[vertex] = c
            if graph_coloring_util(graph, m, colors, vertex + 1):
                return True
            colors[vertex] = 0  # Backtrack

    return False

def graph_coloring(graph, m):
    colors = [0] * len(graph)
    if graph_coloring_util(graph, m, colors, 0):
        return colors
    return None

# Example usage
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
n = 4  # Number of vertices
k = 3  # Number of colors
graph = [[] for _ in range(n)]
for u, v in edges:
    graph[u].append(v)
    graph[v].append(u)

result = graph_coloring(graph, k)
print("Coloring of the graph:", result)
