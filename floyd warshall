def floyd_warshall(n, times, k):
    # Initialize the distance matrix
    dist = [[float('inf')] * n for _ in range(n)]
    
    for u, v, w in times:
        dist[u-1][v-1] = min(dist[u-1][v-1], w)  # Handle multiple edges

    # Set distance to self as 0
    for i in range(n):
        dist[i][i] = 0

    # Floyd-Warshall algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    # Calculate the maximum time from node k
    max_time = 0
    for j in range(n):
        if dist[k-1][j] == float('inf'):
            return -1  # Not all nodes are reachable
        max_time = max(max_time, dist[k-1][j])

    return max_time
