from collections import defaultdict
import math

def maxProbability(n, edges, succProb, start, end):
    graph = defaultdict(list)
    
    # Build the graph
    for (a, b), prob in zip(edges, succProb):
        graph[a].append((b, prob))
        graph[b].append((a, prob))
    
    # Initialize probabilities
    probabilities = [0] * n
    probabilities[start] = 1
    
    # Relax edges up to n-1 times
    for _ in range(n - 1):
        temp_probabilities = probabilities[:]
        for node in range(n):
            for neighbor, prob in graph[node]:
                if temp_probabilities[node] * prob > probabilities[neighbor]:
                    probabilities[neighbor] = temp_probabilities[node] * prob
    
    return probabilities[end]

# Example usage
n = 3
edges = [[0, 1], [1, 2], [0, 2]]
succProb = [0.5, 0.5, 0.2]
start = 0
end = 2
print(maxProbability(n, edges, succProb, start, end))  # Output: 0.25
