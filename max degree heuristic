class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = {i: [] for i in range(vertices)}

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    def max_degree_vertex_cover(self):
        cover = set()
        edges = set((u, v) for u in self.graph for v in self.graph[u])

        while edges:
            # Find the vertex with the maximum degree
            max_degree_vertex = max(self.graph, key=lambda x: len(self.graph[x]))
            cover.add(max_degree_vertex)

            # Remove all edges connected to this vertex
            for neighbor in self.graph[max_degree_vertex]:
                edges.discard((max_degree_vertex, neighbor))
                edges.discard((neighbor, max_degree_vertex))
            self.graph.pop(max_degree_vertex)

        return cover

# Example usage
g = Graph(5)
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 2)
g.add_edge(1, 3)
g.add_edge(3, 4)

vertex_cover = g.max_degree_vertex_cover()
print("Vertex Cover:", vertex_cover)
