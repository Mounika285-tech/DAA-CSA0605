import numpy as np

# Initialize the distance matrix
def initialize_distance_matrix(num_cities, edges):
    distance_matrix = np.full((num_cities, num_cities), float('inf'))
    for i in range(num_cities):
        distance_matrix[i][i] = 0  # Distance to self is zero
    for (src, dest, weight) in edges:
        distance_matrix[src][dest] = weight
    return distance_matrix

# Floyd's Algorithm implementation
def floyd_warshall(distance_matrix):
    num_cities = len(distance_matrix)
    for k in range(num_cities):
        for i in range(num_cities):
            for j in range(num_cities):
                if distance_matrix[i][j] > distance_matrix[i][k] + distance_matrix[k][j]:
                    distance_matrix[i][j] = distance_matrix[i][k] + distance_matrix[k][j]
    return distance_matrix

# Example usage
edges = [(0, 1, 3), (1, 2, 1), (0, 2, 5)]
num_cities = 3
distance_matrix = initialize_distance_matrix(num_cities, edges)

print("Distance Matrix Before:")
print(distance_matrix)

distance_matrix = floyd_warshall(distance_matrix)

print("Distance Matrix After:")
print(distance_matrix)
