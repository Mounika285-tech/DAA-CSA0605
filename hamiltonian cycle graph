def is_hamiltonian_cycle(graph, path, pos, n):
    if pos == n:
        return path[0] in graph[path[pos - 1]]

    for vertex in range(1, n):
        if is_safe(vertex, graph, path, pos):
            path[pos] = vertex
            if is_hamiltonian_cycle(graph, path, pos + 1, n):
                return True
            path[pos] = -1  # Backtrack
    return False

def is_safe(vertex, graph, path, pos):
    if graph[path[pos - 1]][vertex] == 0:
        return False
    if vertex in path:
        return False
    return True

def hamiltonian_cycle(edges, n):
    graph = [[0] * n for _ in range(n)]
    for u, v in edges:
        graph[u][v] = 1
        graph[v][u] = 1

    path = [-1] * n
    path[0] = 0  # Start from the first vertex

    if is_hamiltonian_cycle(graph, path, 1, n):
        return True
    return False

# Example usage
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
n = 4
print(hamiltonian_cycle(edges, n))  # Output: True
