def greedy_coloring(edges, n):
    # Create an adjacency list
    adjacency_list = {i: [] for i in range(n)}
    for u, v in edges:
        adjacency_list[u].append(v)
        adjacency_list[v].append(u)

    # Initialize colors
    colors = [-1] * n
    available_colors = [True] * n

    # Color the first vertex
    colors[0] = 0

    # Assign colors to remaining vertices
    for u in range(1, n):
        # Mark colors of adjacent vertices as unavailable
        for v in adjacency_list[u]:
            if colors[v] != -1:
                available_colors[colors[v]] = False

        # Find the first available color
        for color in range(n):
            if available_colors[color]:
                colors[u] = color
                break

        # Reset the available colors for the next iteration
        available_colors = [True] * n

    return colors

edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
n = 4
result = greedy_coloring(edges, n)
print("Colors assigned to each region:", result)
