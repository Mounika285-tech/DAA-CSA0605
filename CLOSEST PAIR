import math

def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

def brute_force(points):
    min_dist = float('inf')
    closest_pair = None
    for i in range(len(points)):
        for j in range(i+1, len(points)):
            dist = distance(points[i], points[j])
            if dist < min_dist:
                min_dist = dist
                closest_pair = (points[i], points[j])
    return min_dist, closest_pair

def closest_pair(points):
    # Base case: 3 or fewer points
    if len(points) <= 3:
        return brute_force(points)

    # Divide points into two halves
    mid = len(points) // 2
    left = points[:mid]
    right = points[mid:]

    # Recursively find closest pairs in each half
    left_min_dist, left_closest_pair = closest_pair(left)
    right_min_dist, right_closest_pair = closest_pair(right)

    # Find the minimum distance between the two halves
    min_dist = min(left_min_dist, right_min_dist)

    # Find the points in the middle strip
    middle_strip = [p for p in points if abs(p[0] - points[mid][0]) < min_dist]

    # Update the minimum distance and closest pair
    for i in range(len(middle_strip)):
        for j in range(i+1, min(i+7, len(middle_strip))):
            dist = distance(middle_strip[i], middle_strip[j])
            if dist < min_dist:
                min_dist = dist
                closest_pair = (middle_strip[i], middle_strip[j])

    return min_dist, closest_pair

# Test the code
points = [(2, 3), (5, 4), (1, 2), (4, 5), (7, 8), (9, 10)]
min_dist, closest_pair = closest_pair(points)
print("Minimum distance:", min_dist)
print("Closest pair:", closest_pair)
